name: Test workflow

on:
  push:
    branches:
      - '**'
      - '!main'

jobs:
  build_docker_continers:
    environment:
      name: Approval
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Main Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: nardoarevalo14/openai_embeddings_service:latest

      - name: Build and Push Datascrape Consumer Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile-datascrape-rabbitmq-consumer
          push: true
          tags: nardoarevalo14/datascrape_consumer:latest

      - name: Build and Push Embeddings Consumer Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile-embeddings-rabbitmq-consumer
          push: true
          tags: nardoarevalo14/embeddings_consumer:latest
  build_infrastructure:
    needs: [ build_docker_continers ]
    runs-on: ubuntu-latest
    environment:
      name: Approval
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create or Update Cloudformation
        run: |
          STACK_NAME="open-ai-embeddings-service"
          TEMPLATE_FILE="deployment/infra_cloudformation.yml"
          CAPABILITIES="CAPABILITY_IAM"

          aws cloudformation list-stacks > stacks.json
          cat stacks.json
          STACK_EXISTS=$(python scripts/parse_stacks.py "$STACK_NAME")

          if [[ "$STACK_EXISTS" == "nostack" ]]; then
            echo "Stack does not exist. Creating stack..."
            aws cloudformation create-stack --stack-name $STACK_NAME --template-body file://$TEMPLATE_FILE --parameters ParameterKey=RDSPASSWORD,ParameterValue="${{ secrets.RDS_PASSWORD }}" --capabilities $CAPABILITIES
            aws cloudformation wait stack-create-complete --stack-name $STACK_NAME
          else
            echo "Stack exists. Updating stack..."
            aws cloudformation update-stack --stack-name $STACK_NAME --template-body file://$TEMPLATE_FILE --parameters ParameterKey=RDSPASSWORD,ParameterValue="${{ secrets.RDS_PASSWORD }}" --capabilities $CAPABILITIES 2>&1 && \
            aws cloudformation wait stack-update-complete --stack-name $STACK_NAME 2>&1 || echo "update stack failed"
            exit 0
          fi
